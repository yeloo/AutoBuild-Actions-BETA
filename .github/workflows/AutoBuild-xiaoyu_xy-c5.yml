###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################
name: Xiaoyu C5

on:
  repository_dispatch:
  ## Git Push 时触发编译(不要删除此行注释)
  #push:
  #  branches: 
  #    - master
  
  ## 定时触发编译(不要删除此行注释)
  #schedule:
  #  - cron: 0 8 * * 5
  
  ## 重新点亮 Star 时触发编译(不要删除此行注释)
  #watch:
  #  types: [started]
  
  ### 界面控制部分 ( 以下内容请保持不变, 如有需要仅修改 options 选项 )
  workflow_dispatch:
    inputs:
      Tempoary_CONFIG:
        description: '配置文件'
        default: 'xiaoyu_xy-c5'
        type: choice
        options:
          - 'xiaoyu_xy-c5'
          - 'xiaoyu_xy-c5-Clash'
      Tempoary_FLAG:
        description: '固件标签'
        default: 'AUTO'
        type: choice
        options:
          - 'AUTO'
          - 'Full'
          - 'Clash'
      Tempoary_IP:
        description: '固件 IP 地址 [可选]'
        default: ''
      UPLOAD_RELEASES:
        description: '上传固件到 Releases'
        default: 'true'
        type: boolean
      UPLOAD_ARTIFACTS:
        description: '上传固件到 Artifacts'
        default: 'false'
        type: boolean
      UPLOAD_BIN_ARTIFACTS:
        description: '上传 bin 文件夹到 Artifacts'
        default: 'false'
        type: boolean
      ### 界面控制部分结束 ( 以上内容请保持不变 )

### 请按需求修改以下内容
### 环境变量设置
env:
# 编译时调用的 [.config] 文件名称
  CONFIG_FILE: xiaoyu_xy-c5
# 源码仓库:分支
  DEFAULT_SOURCE: coolsnowwolf/lede:master
# 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: true
# 删除早期的 workflow 任务
  DELETE_OLD_WORKFLOW: false
# Cache 加速编译
  CACHE_ACCELERATE: false
### 结束
### 请按需求修改以上内容

jobs:
  Compile:
    runs-on: ubuntu-22.04
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:

- name: 深度清理磁盘空间
  run: |
    # 删除预装的大型软件（.NET、Android SDK、Haskell 等）
    sudo rm -rf /usr/share/dotnet
    sudo rm -rf /opt/ghc
    sudo rm -rf /usr/local/share/boost
    sudo rm -rf /var/cache/apt/archives/*.deb
    sudo rm -rf /var/lib/apt/lists/*
    sudo rm -rf /usr/local/lib/android
    sudo rm -rf /opt/microsoft/powershell
    sudo rm -rf /usr/share/swift
    # 清理 Docker 镜像和缓存（释放大量空间）
    sudo docker system prune -af
    # 清理 swap 分区（如果存在）
    sudo swapoff -a
    sudo rm -f /swapfile
    # 显示当前可用空间
    df -h

# 第二步：使用工具进一步优化
- name: 优化磁盘空间（工具辅助）
  uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
  with:
    operate_sudo: "True"
    general_include: ".+"
    general_exclude: |-
      ^GCC$
      ^G\+\+$
      Clang
      LLVM
    docker_include: ".+"
    docker_prune: "True"
    docker_clean: "True"
    apt_prune: "True"
    apt_clean: "True"
    homebrew_prune: "True"
    homebrew_clean: "True"
    npm_prune: "True"
    npm_clean: "True"
    os_swap: "True"

# 第三步：调整保留空间和 swap
- name: 最大化构建空间
  uses: easimon/maximize-build-space@master
  with:
    root-reserve-mb: 1024  # 只保留 1GB 根目录空间（默认保留更多）
    swap-size-mb: 0        # 禁用 swap（节省空间，编译主要依赖内存）
    remove-dotnet: 'true'
    remove-android: 'true'
    remove-haskell: 'true'
    remove-codeql: 'true'
    remove-docker-images: 'true'

    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Load Custom Variables
      run: |
        if [ -n "${{ github.event.inputs.Tempoary_CONFIG }}" ]
        then
            if [ -f "$GITHUB_WORKSPACE/Configs/${{ github.event.inputs.Tempoary_CONFIG }}" ]
            then
                CONFIG_FILE=${{ github.event.inputs.Tempoary_CONFIG }}
            else
                CONFIG_FILE=${{ env.CONFIG_FILE }}
            fi
        else
            CONFIG_FILE=${{ env.CONFIG_FILE }}
        fi
        if [ ! -f "$GITHUB_WORKSPACE/Configs/$CONFIG_FILE" ]
        then
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE] is not detected ..."
            exit 1
        else
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE]"
            echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_IP }}" ]
        then
            echo "IP: [${{ github.event.inputs.Tempoary_IP }}]"
            echo "Tempoary_IP=${{ github.event.inputs.Tempoary_IP }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_FLAG }}" ]
        then
            echo "FLAG: [${{ github.event.inputs.Tempoary_FLAG }}]"
            echo "Tempoary_FLAG=${{ github.event.inputs.Tempoary_FLAG }}" >> $GITHUB_ENV
        fi
        REPO_URL="https://github.com/$(cut -d \: -f 1 <<< ${{ env.DEFAULT_SOURCE }})"
        REPO_BRANCH=$(cut -d \: -f 2 <<< ${{ env.DEFAULT_SOURCE }})
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_ENV
        if [[ -z "${{ github.event.inputs.Tempoary_CONFIG }}" ]]; then
            echo "TIMED_TRIGGER=true" >> $GITHUB_ENV
        else
            echo "UPLOAD_RELEASES=${{ github.event.inputs.UPLOAD_RELEASES }}" >> $GITHUB_ENV
            echo "UPLOAD_ARTIFACTS=${{ github.event.inputs.UPLOAD_ARTIFACTS }}" >> $GITHUB_ENV
            echo "UPLOAD_BIN_ARTIFACTS=${{ github.event.inputs.UPLOAD_BIN_ARTIFACTS }}" >> $GITHUB_ENV
        fi

    - name: TIMED_TRIGGER
      if: env.TIMED_TRIGGER == 'true'
      env:
        UPLOAD_RELEASES: true
        UPLOAD_ARTIFACTS: false
        UPLOAD_BIN_ARTIFACTS: false
      run: |
        echo "UPLOAD_RELEASES=${UPLOAD_RELEASES}" >> $GITHUB_ENV
        echo "UPLOAD_ARTIFACTS=${UPLOAD_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_ARTIFACTS=${UPLOAD_BIN_ARTIFACTS}" >> $GITHUB_ENV

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update
        sudo -E apt -y full-upgrade
        sudo -E apt-get -y install busybox build-essential cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs rsync
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Clone Openwrt Source Code
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Accelerate
      if: env.CACHE_ACCELERATE == 'true'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: false
        toolchain: true
        skip: true
        clean: true
        prefix: ${{ github.workspace }}/openwrt

    - name: Run Diy Scripts
      run: |
        echo "Free space:"
        df -h
        chmod +x Scripts/AutoBuild_*.sh
        cd openwrt
        if [ "${{ env.CACHE_ACCELERATE }}" == true ]
        then
            echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
        fi
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_DiyScript.sh
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        make defconfig
        Firmware_Diy_Start
        rm -f .config && cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        Firmware_Diy_Main
        Firmware_Diy
        Firmware_Diy_Other

    - name: Pre-download Libraries
      run: |
        cd openwrt
        ./scripts/feeds install -a
        make defconfig
        make download -j8

    - name: Build OpenWrt
      id: compile
      run: |
        cd openwrt
        make -j4 || make -j1 V=s
        [ "$?" == 0 ] && echo "Compile_Result=true" >> $GITHUB_ENV || echo "Compile_Result=false" >> $GITHUB_ENV

    - name: Checkout Firmware
      if: steps.compile.outcome == 'success' && !cancelled()
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_End

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_firmware_${{ env.Compile_Date }}
        path: openwrt/bin/Firmware

    - name: Upload bin to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_ARTIFACTS == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_bin_${{ env.Compile_Date }}
        path: openwrt/bin

    - name: Upload Firmware to Release
      uses: svenstaro/upload-release-action@v2
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: openwrt/bin/Firmware/*
        file_glob: true
        tag: AutoUpdate
        overwrite: true
        
    - name: Refresh API (1/2)
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      run: |
        wget https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O API
        
    - name: Refresh API (2/2)
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./API
        file_glob: true
        tag: AutoUpdate
        overwrite: true

    - name: Delete old Workflow Runs
      continue-on-error: true
      if: env.DELETE_OLD_WORKFLOW == 'true' && !cancelled()
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 0
